{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","issueCollections","setIssueCollections","type","events","name","eventCollections","setEventCollections","cardVisibility","setCardVisibility","key","setKey","useEffect","lastWeekday","workday","moment","day","diff","subtract","getPreviousWorkday","format","a","async","console","log","fetch","then","raw","text","split","element","summary","filter","el","map","Object","keys","issues","issueSet","issue","issueData","match","url","message","slice","indexOf","push","timestamp","length","user","sort","issueA","issueB","parseInt","prevState","getSummary","json","newEventCollections","forEach","event","i","findIndex","className","Jumbotron","Tabs","activeKey","onSelect","k","Tab","eventKey","title","trackObj","Card","Title","onClick","Body","Table","striped","bordered","hover","size","date","Date","setUTCSeconds","toDateString","href","eventTypeObj","repo","width","height","src","frameBorder","allow","allowFullScreen","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0b432f8f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Card, Table, Tabs, Tab, Jumbotron } from 'react-bootstrap';\n\nfunction getPreviousWorkday(){\n  let workday = moment();\n  let day = workday.day();\n  let diff = 1;  \n  if (day === 0 || day === 1){ \n    diff = day + 2;  \n  }\n  return workday.subtract(diff, 'days');\n}\n\nfunction App() {\n  const [issueCollections, setIssueCollections] = useState([])\n  const [eventCollections, setEventCollections] = useState([\n    {type: \"PushEvent\", events: [], name: \"New Commits\"},\n    {type: \"PullRequestEvent\", events: [], name: \"New Pull Requests\"},\n    {type: \"CreateEvent\", events: [], name: \"New Repositories\"},\n    {type: \"IssuesEvent\", events: [], name: \"New Issues\"},\n    {type: \"IssueCommentEvent\", events: [], name: \"New Comments\"}\n  ])\n  const [cardVisibility, setCardVisibility] = useState({})\n  const [key, setKey] = useState('issues');\n\n  useEffect(() => {\n    let lastWeekday = getPreviousWorkday().format('YYYY-MM-DD')\n    async function getSummary() {\n      console.log(`https://raw.githubusercontent.com/learn-co-curriculum/curriculum-team/master/issues_output/${lastWeekday}/summary.txt`)\n      let summary = await fetch(`https://raw.githubusercontent.com/learn-co-curriculum/curriculum-team/master/issues_output/${lastWeekday}/summary.txt`)\n                            .then(raw => raw.text())\n                            .then(text => text.split('\\n'))\n\n      summary = summary.filter(el => el !== \"\").map(el => ({[el.split(' ')[0]]: []}))\n      \n      for(let element in summary) {\n        console.log(`https://raw.githubusercontent.com/learn-co-curriculum/curriculum-team/master/issues_output/${lastWeekday}/${Object.keys(summary[element])[0]}.txt`)\n        fetch(`https://raw.githubusercontent.com/learn-co-curriculum/curriculum-team/master/issues_output/${lastWeekday}/${Object.keys(summary[element])[0]}.txt`)\n          .then(raw => raw.text())\n          .then(issues => {\n            issues = issues.split('\\n')\n            issues = issues.filter(el => el !== \"\")\n            let issueSet = []\n            for(let issue in issues) {\n              let issueData = issues[issue].match(/\\[(.*?)\\]/g)\n              let url = issues[issue].match(/http(.*)/g)[0]\n              let message = issues[issue].match(/\\]:(.*?)http/g)[0]\n              message = message.slice(3, message.indexOf(' http'))\n              issueSet.push({\n                timestamp: issueData[0].slice(1, issueData[0].length -1), \n                user: issueData[1].slice(1, issueData[1].length -1), \n                url,\n                message\n              })\n            }\n            issueSet = issueSet.sort((issueA, issueB) => parseInt(issueB.timestamp) - parseInt(issueA.timestamp))\n            summary[element][Object.keys(summary[element])[0]] = issueSet\n            \n            setIssueCollections(summary)\n            setCardVisibility(prevState => ({\n              ...prevState,\n              [Object.keys(summary[element])[0]]: true\n            }))\n            \n          })\n      }\n    }\n\n    function getEvents() {\n      console.log(`https://raw.githubusercontent.com/learn-co-curriculum/curriculum-team/master/issues_output/${lastWeekday}/events.json`)\n      fetch(`https://raw.githubusercontent.com/learn-co-curriculum/curriculum-team/master/issues_output/${lastWeekday}/events.json`)\n        .then(raw => raw.json())\n        .then(json => {\n          let newEventCollections = eventCollections\n          json.forEach(event => {\n            let i = newEventCollections.findIndex(element => element.type === event.type)\n            if(newEventCollections[i] && newEventCollections[i].events) newEventCollections[i].events.push(event)\n          })\n          setEventCollections(newEventCollections)\n          for(let i in newEventCollections) {\n            setCardVisibility(prevState => ({\n              ...prevState,\n              [newEventCollections[i].name]: true\n            }))\n          }\n          \n        })\n    }\n\n    getSummary()\n    getEvents()\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <Jumbotron><h1>Curriculum Health Monitor</h1></Jumbotron>\n      <Tabs activeKey={key} onSelect={k => setKey(k)}>\n        <Tab eventKey=\"issues\" title=\"Open Issues\">\n          <section>\n            <h2>Open Issues</h2>\n            {issueCollections.map(trackObj => {\n              let name = Object.keys(trackObj)[0]\n              return (\n                <Card key={name}>\n                  <Card.Title onClick={() => setCardVisibility(prevState => ({...prevState, [name]: !prevState[name]}))}><span>{name} {cardVisibility[name] ? \"ᐳ\" : \"ᐯ\"}</span><span>{trackObj[name].length}</span></Card.Title>\n                  { cardVisibility[name] ? [] : (\n                  <Card.Body>\n                    <Table striped bordered hover size=\"sm\">\n                      <tbody>\n                        { trackObj[name].map(issue => {\n                          let date = new Date(0)\n                          date.setUTCSeconds(issue.timestamp)\n                          return (\n                            <tr key={issue.message}>\n                              <td>{date.toDateString()}</td>\n                              <td>{issue.message}</td>\n                              <td><a href={issue.url}>{issue.url}</a></td>\n                              <td><a href={`https://github.com/${issue.user}`}>{issue.user}</a></td>\n                            </tr>\n                          )\n                        }) }\n                      </tbody>\n                    </Table>\n                  </Card.Body>\n                  )}\n                </Card>\n              )\n            })}\n          </section>\n        </Tab>\n        <Tab eventKey=\"events\" title=\"Recent Events\">\n            <section>\n              <h2>Recent Events</h2>\n              {eventCollections.map(eventTypeObj => {\n                let name = eventTypeObj.name\n                return (\n                  <Card key={name}>\n                    <Card.Title onClick={() => setCardVisibility(prevState => ({...prevState, [name]: !prevState[name]}))}><span>{name} {cardVisibility[name] ? \"ᐳ\" : \"ᐯ\"}</span><span>{eventTypeObj.events.length}</span></Card.Title>\n                    { cardVisibility[name] ? [] : (\n                      <Card.Body>\n                        <Table striped bordered hover size=\"sm\">\n                          <tbody>\n                            {eventTypeObj.events.map(event => {\n                              return (\n                                <tr key={event.name+event.repo}>\n                                  <td>{event.name}</td>\n                                  <td><a href={event.repo}>{event.repo}</a></td>\n                                </tr>\n                              )\n                            })}\n                          </tbody>\n                        </Table>\n                      </Card.Body>\n                    )}\n                  </Card>\n                )\n              })}\n            </section>\n        </Tab>\n        <Tab eventKey=\"resources\" title=\"Resources\">\n            <section>\n              <h2>Resources</h2>\n              <div className=\"videos\">\n                <div>\n                  <h4>Using Ripgrep to Search for Curriculum Issues</h4>\n                  <iframe title=\"Using Ripgrep to Search for Curriculum Issues\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/owDib4HwWjg\" frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\n                </div>\n                <div>\n                  <h4>Closing a Quiz Issue that Couldn't be Replicated</h4>\n                  <iframe title=\"Closing a Quiz Issue that Couldn't be Replicated\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/sK0qjPzmD6c\" frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\n                </div>\n                <div>\n                  <h4>Fixing a Readme Typo</h4>\n                  <iframe title=\"Fixing a Readme Typo\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/34yCQYX_wnQ\" frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\n                </div>\n                <div>\n                  <h4>Resolving Two Kinds of 'learn submit' Issues</h4>\n                  <iframe title=\"Resolving Two Kinds of 'learn submit' Issues\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/_Kx_NpzZf6w\" frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\n                </div>\n              </div>\n            </section>\n        </Tab>\n      </Tabs>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}